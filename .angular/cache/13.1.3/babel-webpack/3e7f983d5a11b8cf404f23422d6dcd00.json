{"ast":null,"code":"import { ReplaySubject } from 'rxjs';\nimport { Injectable, NgZone, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, Renderer2, NgModule, defineInjectable, inject } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @return {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nfunction win() {\n  return window;\n}\n/**\n * @return {?}\n */\n\n\nfunction YouTubeRef() {\n  return win()['YT'];\n}\n/**\n * @return {?}\n */\n\n\nfunction YouTubePlayerRef() {\n  return YouTubeRef().Player;\n}\n/** @type {?} */\n\n\nconst defaultSizes = {\n  height: 270,\n  width: 367\n};\n\nclass YoutubePlayerService {\n  /**\n   * @param {?} zone\n   */\n  constructor(zone) {\n    this.zone = zone;\n    this.ytApiLoaded = false;\n    this.api = new ReplaySubject(1);\n    this.createApi();\n  }\n  /**\n   * @param {?} options\n   * @return {?}\n   */\n\n\n  loadPlayerApi(options) {\n    /** @type {?} */\n    const doc = win().document;\n\n    if (!this.ytApiLoaded) {\n      this.ytApiLoaded = true;\n      /** @type {?} */\n\n      const playerApiScript = doc.createElement('script');\n      playerApiScript.type = 'text/javascript';\n      playerApiScript.src = `${options.protocol}://www.youtube.com/iframe_api`;\n      doc.body.appendChild(playerApiScript);\n    }\n  }\n  /**\n   * @param {?} elementId\n   * @param {?} outputs\n   * @param {?} sizes\n   * @param {?=} videoId\n   * @param {?=} playerVars\n   * @return {?}\n   */\n\n\n  setupPlayer(elementId, outputs, sizes, videoId = '', playerVars) {\n    /** @type {?} */\n    const createPlayer =\n    /**\n    * @return {?}\n    */\n    () => {\n      if (YouTubePlayerRef) {\n        this.createPlayer(elementId, outputs, sizes, videoId, playerVars);\n      }\n    };\n\n    this.api.subscribe(createPlayer);\n  }\n  /**\n   * @param {?} player\n   * @return {?}\n   */\n\n\n  play(player) {\n    player.playVideo();\n  }\n  /**\n   * @param {?} player\n   * @return {?}\n   */\n\n\n  pause(player) {\n    player.pauseVideo();\n  }\n  /**\n   * @param {?} media\n   * @param {?} player\n   * @return {?}\n   */\n\n\n  playVideo(media, player) {\n    /** @type {?} */\n    const id = media.id.videoId ? media.id.videoId : media.id;\n    player.loadVideoById(id);\n    this.play(player);\n  }\n  /**\n   * @param {?} player\n   * @return {?}\n   */\n\n\n  isPlaying(player) {\n    // because YT is not loaded yet 1 is used - YT.PlayerState.PLAYING\n\n    /** @type {?} */\n    const isPlayerReady = player && player.getPlayerState;\n    /** @type {?} */\n\n    const playerState = isPlayerReady ? player.getPlayerState() : {};\n    /** @type {?} */\n\n    const isPlayerPlaying = isPlayerReady ? playerState !== YouTubeRef().PlayerState.ENDED && playerState !== YouTubeRef().PlayerState.PAUSED : false;\n    return isPlayerPlaying;\n  }\n  /**\n   * @param {?} elementId\n   * @param {?} outputs\n   * @param {?} sizes\n   * @param {?=} videoId\n   * @param {?=} playerVars\n   * @return {?}\n   */\n\n\n  createPlayer(elementId, outputs, sizes, videoId = '', playerVars = {}) {\n    /** @type {?} */\n    const playerSize = {\n      height: sizes.height || defaultSizes.height,\n      width: sizes.width || defaultSizes.width\n    };\n    /** @type {?} */\n\n    const ytPlayer = YouTubePlayerRef();\n    return new ytPlayer(elementId, Object.assign({}, playerSize, {\n      events: {\n        onReady:\n        /**\n        * @param {?} ev\n        * @return {?}\n        */\n        ev => {\n          this.zone.run(\n          /**\n          * @return {?}\n          */\n          () => outputs.ready && outputs.ready.next(ev.target));\n        },\n        onStateChange:\n        /**\n        * @param {?} ev\n        * @return {?}\n        */\n        ev => {\n          this.zone.run(\n          /**\n          * @return {?}\n          */\n          () => outputs.change && outputs.change.next(ev));\n        }\n      },\n      playerVars,\n      videoId\n    }));\n  }\n  /**\n   * @param {?} player\n   * @param {?} isFullScreen\n   * @return {?}\n   */\n\n\n  toggleFullScreen(player, isFullScreen) {\n    let {\n      height,\n      width\n    } = defaultSizes;\n\n    if (!isFullScreen) {\n      height = window.innerHeight;\n      width = window.innerWidth;\n    }\n\n    player.setSize(width, height);\n  } // adpoted from uid\n\n  /**\n   * @return {?}\n   */\n\n\n  generateUniqueId() {\n    /** @type {?} */\n    const len = 7;\n    return Math.random().toString(35).substr(2, len);\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  createApi() {\n    /** @type {?} */\n    const onYouTubeIframeAPIReady =\n    /**\n    * @return {?}\n    */\n    () => {\n      if (win()) {\n        this.api.next(YouTubeRef());\n      }\n    };\n\n    win()['onYouTubeIframeAPIReady'] = onYouTubeIframeAPIReady;\n  }\n\n}\n\nYoutubePlayerService.ɵfac = function YoutubePlayerService_Factory(t) {\n  return new (t || YoutubePlayerService)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nYoutubePlayerService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: YoutubePlayerService,\n  factory: YoutubePlayerService.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\n/** @nocollapse */\nYoutubePlayerService.ngInjectableDef = defineInjectable({\n  factory: function YoutubePlayerService_Factory() {\n    return new YoutubePlayerService(inject(NgZone));\n  },\n  token: YoutubePlayerService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet YoutubePlayerComponent = /*#__PURE__*/(() => {\n  class YoutubePlayerComponent {\n    /**\n     * @param {?} playerService\n     * @param {?} elementRef\n     * @param {?} renderer\n     */\n    constructor(playerService, elementRef, renderer) {\n      this.playerService = playerService;\n      this.elementRef = elementRef;\n      this.renderer = renderer;\n      this.videoId = '';\n      this.height = defaultSizes.height;\n      this.width = defaultSizes.width;\n      /**\n       * \\@description sets the protocol by the navigator object\n       * if there is no window, it sets a default http protocol\n       * unless the protocol is set from outside\n       */\n\n      this.protocol = this.getProtocol();\n      this.playerVars = {}; // player created and initialized - sends instance of the player\n\n      this.ready = new EventEmitter(); // state change: send the YT event with its state\n\n      this.change = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterContentInit() {\n      /** @type {?} */\n      const htmlId = this.playerService.generateUniqueId();\n      /** @type {?} */\n\n      const playerSize = {\n        height: this.height,\n        width: this.width\n      };\n      /** @type {?} */\n\n      const container = this.renderer.selectRootElement('#yt-player-ngx-component');\n      this.renderer.setAttribute(container, 'id', htmlId);\n      this.playerService.loadPlayerApi({\n        protocol: this.protocol\n      });\n      this.playerService.setupPlayer(htmlId, {\n        change: this.change,\n        ready: this.ready\n      }, playerSize, this.videoId, this.playerVars);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getProtocol() {\n      /** @type {?} */\n      const hasWindow = window && window.location;\n      /** @type {?} */\n\n      const protocol = hasWindow ? window.location.protocol.replace(':', '') : 'http';\n      return protocol;\n    }\n\n  }\n\n  YoutubePlayerComponent.ɵfac = function YoutubePlayerComponent_Factory(t) {\n    return new (t || YoutubePlayerComponent)(ɵngcc0.ɵɵdirectiveInject(YoutubePlayerService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  YoutubePlayerComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: YoutubePlayerComponent,\n    selectors: [[\"youtube-player\"]],\n    inputs: {\n      videoId: \"videoId\",\n      height: \"height\",\n      width: \"width\",\n      protocol: \"protocol\",\n      playerVars: \"playerVars\"\n    },\n    outputs: {\n      ready: \"ready\",\n      change: \"change\"\n    },\n    decls: 1,\n    vars: 0,\n    consts: [[\"id\", \"yt-player-ngx-component\"]],\n    template: function YoutubePlayerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", 0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return YoutubePlayerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet NgxYoutubePlayerModule = /*#__PURE__*/(() => {\n  class NgxYoutubePlayerModule {\n    /**\n     * @return {?}\n     */\n    static forRoot() {\n      return {\n        ngModule: NgxYoutubePlayerModule,\n        providers: [YoutubePlayerService]\n      };\n    }\n\n  }\n\n  NgxYoutubePlayerModule.ɵfac = function NgxYoutubePlayerModule_Factory(t) {\n    return new (t || NgxYoutubePlayerModule)();\n  };\n\n  NgxYoutubePlayerModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgxYoutubePlayerModule\n  });\n  NgxYoutubePlayerModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [YoutubePlayerService],\n    imports: [[]]\n  });\n  return NgxYoutubePlayerModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxYoutubePlayerModule, {\n    declarations: [YoutubePlayerComponent],\n    exports: [YoutubePlayerComponent]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { win, YouTubeRef, YouTubePlayerRef, defaultSizes, YoutubePlayerService, YoutubePlayerComponent, NgxYoutubePlayerModule }; //# sourceMappingURL=ngx-youtube-player.js.map","map":null,"metadata":{},"sourceType":"module"}